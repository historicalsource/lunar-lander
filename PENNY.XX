;        .TITLE PENNY- COIN & CREDIT ACCRUER
        .SBTTL *********************************
        .SBTTL * PROGRAMERS: DOWNEND & ALBAUGH *
        .SBTTL *                               *
        .SBTTL * CHECKER:                      *
        .SBTTL *                               *
        .SBTTL *********************************
        .SBTTL EXPLANATION
        .RADIX 16
	.ENABL LC
        .LIST MEB
;COIN ROUTINE FOR 16-OPTION STANDARD AS PER MEMO
;FROM STEVE BRISTOW DATED 9.27.77 OR 4-OPTION STANDARD
;PER MEMO FROM FRANK BALLOUZ 4/20/78
;
;THREE-MECH, INCLUDE, AND RTS, OPTIONS ADDED
;7-MAY-79 (MEA)
;
        .SBTTL DEFAULT ASSIGNMENTS
;THESE DEFAULTS CONFIGURE FOR SPRINT4 HARDWARE
        .LIST CND
        .IIF NDF,MODES,MODES=4          ;FOUR COIN MODES STANDARD
	.IIF NDF,MECHS,MECHS=2		;# OF MECHS
	.IIF NDF,INCLUDE,INCLUDE=0	;NOT ".INCLUDE"'D
	.IIF NDF,RTS,RTS=1		;EXIT VIA RTS
	.IF EQ,MODES-16.		;IF MODES=16
	.IIF NDF,SEPCCT,SEPCCT=1	;DEFAULT SEPARATE COIN-COUNTS
	.IFF				;IF MODES=0 OR 4
	.IIF NDF,SEPCCT,SEPCCT=0	;DEFAULT SAME COIN-COUNT
	.ENDC
        .IIF NDF,OFFSET,OFFSET=2        ;SWITCHES AND STATUS BYTES TWO-APART
        .IIF NDF,COIN,COIN=0            ;COIN IS LOW-TRUE
        .IIF NDF,CNTINT,CNTINT=1        ;COUNT INTERRUPTS (IN $INTCT)
        .IIF NDF,SLAM,SLAM=1            ;SLAM IS HIGH-TRUE
        .IIF NDF,CMZP,CMZP=1            ;COIN MODE IS IN ZERO-PAGE
        .IIF NDF,SHRCMD,SHRCMD=1        ;SHARE A BYTE FOR CMODE, FIRST
        .IIF NDF,LONGST,LONGST=1        ;USE LONG (1/2 SEC) STRINGTIMER
        .IIF NDF,COIN67,COIN67=0        ;COINS NOT IN D7,D6 OF SAME BYTE
	.IIF NDF,COIN01,COIN01=0	;COINS NOT IN D0,D1 EITHER
        .IIF NDF,PRST,PRST=30.          ;PRE-COIN SLAM KILLS COINS FOR 30 FRAMES
        .IIF NDF,POST,POST=30.          ;POST-COIN SLAM KILLS COINS WITHIN 30 FRAMES
	.IIF NDF,CTCOIN,CTCOIN=0	;SET TO ONE TO COUNT TOTAL COINS
	.IIF NDF,CTCRED,CTCRED=0	;SET TO ONE TO COUNT TOTAL CREDITS
	.IIF NDF,PULSE,PULSE=4		;4 FRAME (66 MS.) PULSE FOR COIN-COUNTER
        .IF NE,CMZP
        .MACRO GCM
        LDA Z,$CMODE            ;GET COIN MODE FROM ZERO-PAGE
        .IIF NE,SHRCMD, AND I,MODES-1&0FF       ;STRIP "FIRST"
        .ENDM
        .ENDC
        .NLIST CND
;ENTRY POINT
        .GLOBL MOOLAH
;
;EXTERNAL REFERENCES
	.IF NE,MODES
	.IF NE,CMZP
        .GLOBL $CMODE                   ;INPUT COIN MODE
	.ENDC
	.ENDC
        .GLOBL $COINA,$LAM              ;SWITCH LOCATIONS (COIN & SLAM)
        .GLOBL $LMBIT                   ;MASK WITH 1 IN BIT WHERE SLAM SW. IS
        .GLOBL $CNSTT,$PSTSL		;INTERNAL LOCATIONS
	.IF NE,LONGST!PULSE-2		;IF LONG STRING-TIMER OR PULSES, WE NEED
	.GLOBL $INTCT			;INTERRUPT COUNTER
	.ENDC
	.IF EQ,MODES-16
        .GLOBL $FIRST                   ;COULD SHARE BYTE WITH CMODE
	.ENDC
        .GLOBL $LMTIM,$CNCT             ;SLAM-TIMER, COINCOUNT
	.IF NE,MODES
        .GLOBL $$CRDT                   ;RESULT OF ALL THIS
	.ENDC
	.IF NE,CTCOIN!CTCRED
	.GLOBL $CCTIM
	.ENDC
        .IF NE,MODES&<MODES-4>&<MODES-16.>
        .ERROR                  ;3 FLAVORS-0,4, OR 16 MODES
        .ENDC
	.IF NE,<PULSE-2>&<PULSE-4>&<PULSE-8>	;CHECK PULSE LENGTH SPEC'D
	.ERROR			;2,4,OR 8 FRAME PULSES ONLY
	.ENDC
	.IF NE,<MECHS-2>*<MECHS-3>	;CHECK # OF MECHS SPEC'D
	.ERROR			;2 OR 3 MECHS ONLY, PLEASE
	.ENDC
	.IF EQ,MECHS-3
	.IF EQ,MODES-16
	.ERROR			;16 MODES ON 3 MECHS DOESN'T WORK
	.ENDC			;MODES-16
	.ENDC			;MECH-3
	.IF EQ,RTS
	.IF EQ,INCLUDE
	.ERROR			;NO RTS, NO INCLUDE???
	.ENDC			;INCLUDE
	.ENDC			;RTS
        .IIF GT,PRST-31.,PRST=31.
        .IIF GT,POST-63.,POST=63.
        .IF EQ,MODES-16
        .REPT 0
When a coin is detected, the coin-count ($CNCT) is incremented.  Then the  "price"  of  "x
credits" is fetched from CPTAB.  If the coin-count.GE.price, then credit is incremented as
indicated in CPTAB.
An entry in CPTAB looks like:

        (XXXXFAAA)=1 BYTE
        XXXX = CREDIT, I.E., no. of plays
        F    = 1 IF later coins count one more credit than first coin
        AAA = PRICE, I.E., no. of coins for XXXX CREDITS

Thus any variation from 1 PLAY/7 COINS to 16 PLAYS/1 COIN is possible

The index into CPTAB is created as follows:
        (XXXACCCC)=1 BYTE
        X : ALWAYS ZERO
        A : 0 = LEFT coin mech
            1 = RIGHT coin mech
        cccc:   coin mode (0000-1111)
        .endr
        .endc
        .rept 0
        The coin routine assumes the presence of the following .GLOBL variables:
   1) $$CRDT:   base page byte initialized to 0 on restart.  This is where accrued  credit
        is  kept.   Should  be  decremented  for each player-start.  Note that a DECREMENT
        instruction must be used to insure  mutual  exclusion  between  the  main  program
        accessing  $$CRDT  and  the  interrupt-driven coin routine accessing $$CRDT".  Not
        used if MODES=0
   2) $CMODE:   base page byte that contains the coin option  switches  in  its  low-order
        nybble  (high true).  You must put it there.  this is not used if flag CMZP=0.  In
        this case you must define a macro to get the coin mode in the lsb's  of  the  ACC,
        clearing the msb's, not disturbing carry
   3) $CNSTT:   Two base page bytes ($CNSTT, $CNSTT+OFFSET) which should be initialized to
        00 (the timers for coin detection).
   4) $COINA:   Two locations containing coin switches in D7 Left mech  at  $COINA,  Right
        mech  at  $COINA+OFFSET.   If  COIN67=1,  Switches  are  both in $COINA, D7-Right,
        D6-Left.
   5) $FIRST:   Base page byte.  Flag indicating whether first  coin  has  been  accepted.
        Must  be initialized to plus (or zero, if SHRCMD=0) and reset to plus (or zero) at
        the end of a game.  All other bits are ignored/maintained if the  flag  SHRCMD  is
        set non-zero.  Used only if MODES=16
   6) $CNCT:    2 base page bytes ($CNCT, $CNCT+OFFSET) which must be initialized to  zero
        on pwron - coin counters (only one is used if MODES = 0 or 4)
   7) $PSTSL:   Pair of base page bytes  ($PSTSL,  $PSTSL+OFFSET)used  to  time  post-coin
        slam.
   8) $LAM:     Address of the SLAM switch.  the bit position inside $LAM is specified  by
        $LMBIT (see below)
   9) $LMTIM:   Base  page  byte  used  as  a  timer  for  pre-slam  protection.   May  be
        initialized  to  FF  at  pwron  to  disallow  coin input for 4 seconds.  Coins are
        disallowed for two frames anyway.
   10) $INTCT:  Interrupt counter for  long  string-timer.   If  CNTINT=1,  this  will  be
        incremented  (default  case).   If CNTINT=0, this should be equated to an existing
        counter.
   11) $LMBIT:  Mask used to select which bit in the slam switch  byte  should  be  tested
        (used as I,$LMBIT).  NOT A LOCATION, JUST A VALUE!!
   12) $CCTIM:  TIMER FOR PULSES OUTPUT TO ELECTRO-MECHANICAL COUNTER. IF CTCOIN
	OR CTCRED IS NON-ZERO, ROUTINE WILL RETURN WITH CARRY SET IF COIN
	COUNTER SHOULD BE TURNED ON, CLEARED FOR OFF.
Space requirements:
                RAM: 9 bytes (8 if CMZP=0 or SHRCMD=1)
                ROM: About 200 bytes
The coin routine also assumes it will be called 4 times  a  frame,  where  one  frame=1/60
second.   In  most  cases  this may be accomplished by making the coin routine part of the
interrupt routine.
SAMPLE BASE PAGE ALLOCATION:  (WHERE OFFSET=2)
        $FIRST: .BLKB 1
	$CCTIM:	.BLKB 1		;COIN COUNTER TIMER (IF USED)
        $$CRDT: .BLKB 1
        $CMODE: .BLKB 1         ;OR CMODE=FIRST
        $PSTSL: .BLKB 1
        $LMTIM: .BLKB 1
                .BLKB 1		;$PSTSL FOR SECOND MECH
        $CNCT:  .BLKB 4
        $CNSTT  =$CNCT+1
        .ENDR
        .IF EQ,MODES-16
        .REPT 0
THE COIN MODES ARE:
  0:    2 COINS/PLAY-LEFT AND RIGHT
  1:    1 COIN/PLAY-LEFT AND RIGHT
  2:    2 PLAYS/COIN-LEFT AND RIGHT
  3:    3 PLAYS/COIN-LEFT AND RIGHT
  4:    4 PLAYS/COIN-LEFT AND RIGHT
  5:    FIRST COIN-1 PLAY; SECOND AND EXTRA COINS-2 PLAYS/COIN
  6:    FIRST COIN-2 PLAYS; SECOND AND EXTRA COINS-3 PLAYS/COIN
  7:    LEFT=2 COINS/PLAY
        RIGHT=1 COIN/PLAY
  8:    LEFT=1 COIN/PLAY
        RIGHT=1 COIN/2 PLAYS
  9:    LEFT=2 PLAYS/COIN
        RIGHT=4 PLAYS/COIN
  A:    LEFT=FIRST COIN-1 PLAY; SECOND AND EXTRA COINS-2 PLAYS/COIN
        RIGHT=FIRST COIN-3 PLAYS; SECOND AND EXTRA COINS-4 PLAYS/COIN
  B:    LEFT=FIRST COIN-2 PLAYS; SECOND AND EXTRA COINS-3 PLAYS/COIN
        RIGHT=FIRST COIN-5 PLAYS; SECOND AND EXTRA COINS-6 PLAYS/COIN
  C:    LEFT=FIRST COIN-3 PLAYS; SECOND AND EXTRA COINS-4 PLAYS/COIN
        RIGHT=FIRST COIN-7 PLAYS; SECOND AND EXTRA COINS-8 PLAYS/COIN
  D:    LEFT=3 COINS/PLAY
        RIGHT=1 COIN/PLAY
  E:    LEFT=1 COIN/PLAY
        RIGHT=3 PLAYS/COIN
  F:    LEFT=3 PLAYS/COIN
        RIGHT=6 PLAYS/COIN
        .ENDR
        .ENDC
        .IF EQ,MODES-4
        .REPT 0
THE COIN MODES ARE:
  0:    FREE PLAY- $CNCT is zeroed, $$CRDT is not changed
  1:    2 PLAYS PER COIN
  2:    1 PLAY PER COIN
  3:    2 COINS PER PLAY
        .ENDR
        .ENDC
        .REPT 0
                   *** COIN DETECTION ***
Coin detection, courtesy of Mike Albaugh, uses two counters in one  byte  ($CNSTT).   This
byte  is  used to remember the condition of the coin switch.  The upper counter (D7,D6,D5)
runs when the coin is absent and is reset when the coin is  present.   The  lower  counter
(D4-D0)  runs  when  the  coin is present and is reset when the coin is absent, unless the
coin was present for 5 successive samples.  This "unless"  enables  $CNSTT  to  "remember"
that a coin has been VALID-HIGH while waiting for VALID-LOW.
Basically, a valid coin is defined as between 16 and 800 ms of coin present, preceded  and
followed  by  33 ms of coin absent.  The 33 ms lows need not immediately precede or follow
the high.  The lower five bits count  down  from  31  when  the  coin  is  present.   This
countdown  is  fast  (once  per  interupt)  for the first five samples (31-26, about 16-20
milliseconds) then slow (once per EIGHT interrupts) for the remaining counts (26-0,  about
800  ms).   The  count  then  stops  at zero.  This counter is reset if the coin goes away
during the first five counts, I.E., the coin must be present for at least  16  ms.   After
that  the coin must go away for eight counts to reset it.  This is because after the first
five counts a coin is VALID HIGH and must not be reset until VALID LOW occurs  to  prevent
mid-coin glitches from making a valid coin into 0 or 2 (or more) coins.

The upper three bits count up from zero when the coin is absent.  The count  is  reset  if
coin  is  ever  found  present.   When  the  count  finally wraps (8 samples, 33 ms).  The
coin-present counter is checked.  A count from 27-31 (less than 16-20 ms) is too short.  A
count of 0 (more than 800 ms) is too long.  Both of these cases are simply reset to 31.  A
count of 1-26 is a (tentatively) valid coin.  The counter is again set to 31, but  another
counter ($PSTSL) is started.

$PSTSL is the POST-COIN-SLAM timer.  Initially  set  to  120,  it  counts  down  once  per
interrupt  (4  times per frame) to give a nominal 1/2 second delay.  If the slam switch is
seen during this time, $PSTSL is cleared, invalidating the coin.  The length of the  delay
(in  frames)  is  defined by POST which defaults to 30.  It may be set as high as 63 (1.05
seconds) by definition E.G.

        POST=50         ;POST-SLAM=50 FRAMES

SIMILARY A SLAM IS "REMEMBERED" FOR PRST frames (default=30, max=31) and no  coin  can  be
"seen" during this time.

Note that the proper initial  state  of  all  these  counters  etc  is  0,  therefore  the
traditional power-on clear does the trick.  Since coins "transit" from $CNSTT to $PSTSL to
$CNCT to $$CRDT, locations should be cleared in that order, I.E.   $$CRDT  should  be  the
last location cleared.
        .ENDR
        .SBTTL MAINLOOP
;INSTRUCTIONS IN BRACKETS( "[" AND "]" ) ARE FOR ILLUSTRATION ONLY, AND ARE NOT
;ACTUALLY ASSEMBLED.
MOOLAH:
        LDX I,OFFSET*<MECHS-1>	;X IS USED TO INDEX FROM RIGHT TO LEFT COIN MECH
        .IF EQ,COIN67!COIN01
DETECT: LDA AX,$COINA
        ASL
        .IFF
        LDA A,$COINA            ;GET COIN SWITCHES
	.IF NE,COIN01
DETECT:	LSR			;SHIFT SWITCH INTO CARRY
	.IFF
DETECT: ASL
        .ENDC			;NE,COIN01
	.ENDC			;EQ,COIN67!COIN01
        LDA ZX,$CNSTT
        AND I,31.               ;SHARED INST. SEE BELOW IN BRACKETS []
        .IF EQ,COIN
        BCS 5$                  ;BRANCH IF INPUT HIGH (COIN ABSENT)
        .IFF
        BCC 5$                  ;BRANCH IF INPUT LOW (COIN ABSENT)
        .ENDC			;EQ,COIN
;       [AND I,31.]             ISOLATE COIN-ON DOWN-COUNTER, RESET COIN-OFF UP-CTR.
        BEQ 1$                  ;STICK AT 0 (TERMINAL COUNT)
        .IF NE,LONGST
        CMP I,27.               ;IN FIRST FIVE SAMPLES
        BCS 10$                 ;YES, RUN FAST
        TAY                     ;ELSE SAVE STATUS
        LDA Z,$INTCT            ;CHECK INTERUPT CTR
        AND I,7                 ;ARE D0-D2 ALL ONES?
        CMP I,7
        TYA                     ;STATUS BACK INTO ACC
        BCC 1$                  ;SKIP IF NOT BOTH ONES
10$:    SBC I,1                 ;CARRY SET
        .IFF			;LONGEST
        .IF EQ,COIN
        SBC I,0                 ;CARRY CLEAR, THIS SUBTRACTS ONE
        .IFF
        SBC I,1                 ;CARRY SET OR WE WOULDN'T BE HERE
        .ENDC                   ;COIN CONDITIONAL
        .ENDC                   ;LONGST CONDITIONAL
1$:     STA ZX,$CNSTT           ;SAVE UPDATED STATUS
        LDA A,$LAM              ;CHECK SLAM SWITCH
        AND I,$LMBIT
        .IF NE,SLAM
        BEQ 2$                  ;BRANCH IF BIT LO (SWITCH OFF)
        .IFF
        BNE 2$                  ;BRANCH IF BIT HI (SWITCH OFF)
        .ENDC
        LDA I,PRST*8            ;ELSE SET PRE-COIN SLAM TIMER
        STA Z,$LMTIM            ;DECR. 8 TIMES/FRAME=PRST FRAMES
2$:     LDA Z,$LMTIM            ;CHECK PRE-COIN SLAM TIMER
        BEQ 3$                  ;O.K.
        DEC Z,$LMTIM            ;ELSE RUN TIMER
        LDA I,0
        STA ZX,$CNSTT           ;CLEAR COIN STATUS
        STA ZX,$PSTSL           ;CLEAR POST-COIN SLAM-TIMER
3$:     CLC                     ;DEFAULT "NO COIN DETECTED"
        LDA ZX,$PSTSL           ;CHECK POST-COIN SLAM-TIMER
        BEQ 8$                  ;EMPTY, PROCEED
        DEC ZX,$PSTSL           ;RUN TIMER
        BNE 8$                  ;NOT DONE, PROCEED
        SEC                     ;WHEN IT BECOMES ZERO, INDICATE A COIN
        BCS 8$                  ;*** ALWAYS
5$:;    [AND I,31.]             GET COIN-ON DOWN-CTR (ACTUALLY DONE BEFORE)
        CMP I,27.               ;IS COIN VALID YET (ON FOR >4 SAMPLES)
        BCS 6$                  ;NO, RESET IT
        LDA ZX,$CNSTT           ;GET STATUS AGAIN
        ADC I,32.               ;BUMP COIN-OFF UP-CTR.
        BCC 1$                  ;IF IT DIDN'T WRAP, JUST STORE STATUS
        BEQ 6$                  ;IT WRAPPED BUT COIN WAS ON TOO LONG, JUST RESET
        CLC                     ;SET "VALIDITY" AGAIN
6$:     LDA I,31.               ;RESET DOWN-COUNTER
        BCS 1$                  ;BRANCH IF COIN TOO LONG OR TOO SHORT
        STA ZX,$CNSTT           ;SAVE RESET STATUS
;       [CLC]                   DEFAULT TO "NO COIN" (CARRY IS ALREADY CLEAR)
        LDA ZX,$PSTSL           ;CHECK HOWIES ASSUMPTION
        BEQ 7$                  ;BRANCH IF $PSTSL VACANT
        SEC                     ;ELSE GIVE CREDIT A LITTLE EARLY
7$:     LDA I,POST*4            ;/(4 COUNTS/FRAME)="POST" FRAMES
        STA ZX,$PSTSL           ;DELAY ACCEPTANCE FOR POST 60 SEC.
        
8$:                             ;CARRY=1 IF COIN FALLS OUT
        .IF EQ,MODES-4&MODES    ;IF MODES=0 OR 4
        BCC 9$                  ;INC COIN CNT IF CARRY SET
	.IF NE,SEPCCT		;IF ASKED FOR SEPARATE COUNT,
	INC X,$CNCT		;USE INDEXED INC
	.IFF			;ELSE USE COMMON COUNTER
        INC $CNCT
	.ENDC			;NE,SEPCCT
	.IF NE,CTCOIN		;IF COIN COUNTER USED
	INC $CCTIM		;INIT COIN PULSE
	.ENDC			;CTCOIN
9$:
        .IFF                    ;IF MODES=16
CONVRT:                         ;CONVERT COINS TO CREDITS
        GCM                     ;GET COIN MODE IN ACC 0-3
        BCC 20$                 ;CARRY=1 IF COIN WAS DETECTED ELSE ZERO
	.IF NE,CTCOIN		;IF COIN COUNTER USED
	INC $CCTIM		;INIT COIN PULSE
	.ENDC			;NE,CTCOIN
        CMP I,7                 ;MODES 0-6 ARE SPECIAL IN THAT BOTH MECHS COUNT
                                ;THE SAME WAY SO USE ONLY ONE COIN COUNTER
        BPL 10$
        INC Z,$CNCT             ;INCREMENT COMMON COUNTER
        JMP 20$
10$:    INC ZX,$CNCT            ;ELSE INCREMENT APPROPRIATE COUNTER
                                ;CREATE INDEX
20$:
        CPX I,0                 ;IS IT FIRST (LEFT) MECH
        BEQ 40$
        ORA I,10                ;PUT 0,1 AT BIT POITION "A"
40$:    TAY                     ;ACC=INDEX INTO CPTAB
        LDA AY,CPTAB            ;GET NO. OF COINS NEEDED FOR "X" CREDITS FROM CPTAB
        AND I,07                ;  OF COINS IN 3 LSB
        EOR I,0FF
        SEC                     ;NEGATE
        ADC ZX,$CNCT            ;ACC <- COINCT-CPTAP(Y)
        BCC 100$                ;BRANCH ON BORROW
        STA ZX,$CNCT            ;ELSE STORE REDUCED COINCT
        LDA AY,CPTAB            ;GET BACK TABLE ENTRY
        LSR
        LSR
        LSR
        LSR                     ;GET   OF CREDITS IN ACC 0-3, "F" IN CARRY
        LDY Z,$FIRST            ;CHECK FOR FIRST COIN
        .IF NE,SHRCMD
        BMI 50$
        .IFF
        BNE 50$
        .ENDC                   ;SHRCMD CONDITIONAL
        CLC                     ;IF FIRST COIN, CLEAR CARRY
50$:    ADC Z,$$CRDT
	.IF NE,CTCRED		;IF COUNTING CREDITS
	TAY			;SAVE NEW CREDIT
	SEC
	SBC $$CRDT		;SUB OLD
	CLC
	ADC $CCTIM		;ADD OFFSET
	STA $CCTIM		;TO COIN PULSE TIMER
	STY $$CRDT		;STORE NEW CREDIT
	.IFF			;CTCRED=0
        STA Z,$$CRDT            ;CREDIT=CREDIT+CPTAB(Y)/16.+"F"&(NOT FIRST)
	.ENDC			;CTCRED COND.
	.IF NE,SHRCMD
        LDA I,80
        ORA Z,$FIRST
        STA Z,$FIRST
        .IFF
        INC Z,$FIRST            ;A COIN IN EITHER COUNTS AS THE FIRST COIN
        .ENDC                   ;SHRCMD CONDITIONAL
100$:   .IFTF                   ;NO MATTER WHAT NMODES IS
        .IF NE,COIN67!COIN01
        LDA A,$COINA            ;GET SWITCHES AGAIN
	.IF EQ,MECHS-3		;IF 3 MECHS
	CPX I,OFFSET		;CHECK FOR LAST MECH
	BNE 110$		;IF NOT, SHIFT ONCE, FOR MIDDLE
	.IF NE,COIN01
	LSR			;ELSE SHIFT TWICE, FOR D2
110$:	LSR			;NEXT MECH INTO D0
	.IFF
	ASL			;ELSE SHIFT TWICE, FOR D5
110$:	ASL                     ;NEXT MECH INTO SIGN
        .ENDC			;NE,COIN01
	.IFF			;IF 2 MECHS
	.IF NE,COIN01		;IF COINS IN D1,D0
	LSR			;GET D1 INTO D0 FOR DETECT
	.IFF			;IF COINS IN D7,D6
	ASL			;GET D6 INTO D7 FOR DETECT
	.ENDC			;NE,COIN01
	.ENDC			;EQ,MECHS-3
	.ENDC			;NE,COIN67!COIN01
        .REPT OFFSET
        DEX
        .ENDR
        .IFF                    ;ONLY FOR MODES=16
        BMI EXIT
        JMP DETECT              ;LOOP FOR SECOND MECH
CPTAB:                                  ;TABLE OF CREDIT/PRICE VALUES
;I.E. FIRST ENTRY (12) READS: 1 CREDIT FOR 2 COINS
        .BYTE 12,11,21,31,41,19,29,12   ;LEFT MECH
        .BYTE 11,21,19,29,39,13,11,31
        .BYTE 12,11,21,31,41,19,29,11   ;RIGHT MECH
        .BYTE 21,41,39,59,79,11,31,61
        .IFT			;THAT IS, IF MODES=0 OR 4
        BPL DETECT
        .ENDC
        .IF EQ,MODES-4          ;ONLY IF MODES=4
CONVRT: GCM                     ;GET COIN MODE IN ACC 0,1
        TAY                     ;SAVE IT & TEST IT
        BEQ 2$                  ;IF FREE PLAY, KEEP COIN COUNT CLEAR, LEAVE CREDIT
        LSR
        ADC I,0                 ;FORM PRICE (0,1,1,2)
        EOR I,0FF
        SEC                     ;NEGATE
        ADC $CNCT               ;ACC <- COINCT - PRICE
        BCC EXIT                ;BRANCH ON BORROW
        CPY I,2                 ;COIN MODE 2 OR 3?
        BCS 1$                  ;YES, JUST ONE CREDIT
        INC $$CRDT              ;ELSE GIVE TWO FOR MODES 0,1
	.IF NE,CTCRED		;IF COUNTING CREDITS
	INC $CCTIM		;INIT COUNTER PULSE
	.IFTF
1$:	INC $$CRDT
	.IFT
	INC $CCTIM
	.ENDC			;NE, CTCRED
2$:     STA $CNCT               ;STORE REDUCED (OR CLEARED) COINCT
        .ENDC
EXIT:	.IF NE,LONGST!<PULSE-2>		;IF LONG STRING TIMER, OR PULSE>2 FRAMES
	.IIF NE,CNTINT,	INC Z,$INTCT		;COUNT INTERUPTS WHEN REQUESTED
	.ENDC
	.IF NE,CTCRED!CTCOIN		;INCLUDE PULSER
	.IIF NE,PULSE-2,	LDA Z,$INTCT		;NEED $INTCT IF PULSE>2
	.IIF EQ,PULSE-4,	LSR			;USE LSB IF PULSE=4
	.IF EQ,PULSE-8.
	AND I,3				;ISOLATE 2 LSB'S
	CMP I,1				;CLEAR CARRY IF 00
	.ENDC
	LDA Z,$CCTIM			;GET COIN-COUNTER TIMER
	.IIF NE,PULSE-2,	BCS 2$
	BEQ 2$				;BRANCH IF IDLE
	CMP I,10			;MSB'S CLEAR?
	BCS 1$				;NO,SKIP
	ADC I,-1			;ELSE INIT PULSE, SET CARRY
1$:	ADC I,0EF		;(ONE LESS CUZ CARRY SET) DEC MSB'S OF TIMER
	STA Z,$CCTIM			;STORE UPDATED TIMER
2$:	ASL				;SET CARRY PER D7 OF TIMER
	.ENDC
	.IF NE,RTS		;IF THIS IS A SUBROUTINE
	RTS
	.ENDC			;NE,RTS

	.IIF EQ,INCLUDE,.END	;NO .END TO ".INCLUDE"'D FILES
                             